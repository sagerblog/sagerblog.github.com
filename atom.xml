<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SagerXiao's Blog]]></title>
  <link href="http://sagerblog.github.com/atom.xml" rel="self"/>
  <link href="http://sagerblog.github.com/"/>
  <updated>2013-01-15T14:57:30+08:00</updated>
  <id>http://sagerblog.github.com/</id>
  <author>
    <name><![CDATA[Sager Xiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置Nginx和uWsig服务开机自动启动]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/15/linux-service-auto-startup/"/>
    <updated>2013-01-15T14:53:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/15/linux-service-auto-startup</id>
    <content type="html"><![CDATA[<h3>1.配置Nginx服务开机自动启动</h3>

<h4>1.1创建 Nginx 开机启动脚本</h4>

<figure class='code'><figcaption><span>add auto run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/init.d/nginx
</span></code></pre></td></tr></table></div></figure>


<p>将以下内容写到该脚本中</p>

<figure class='code'><figcaption><span>auto start scripts </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">nginx</span><span class="o">=</span>/usr/sbin/nginx
</span><span class='line'><span class="nv">conf</span><span class="o">=</span>/etc/nginx/nginx.conf
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>    start<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Starting Nginx&quot;</span>
</span><span class='line'>        <span class="nv">$nginx</span> -c <span class="nv">$conf</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot; done&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    stop<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Stopping Nginx&quot;</span>
</span><span class='line'>        <span class="nv">$nginx</span> -s stop
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot; done&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    <span class="nb">test</span><span class="o">)</span>
</span><span class='line'>        <span class="nv">$nginx</span> -t -c <span class="nv">$conf</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    reload<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Reloading Nginx&quot;</span>
</span><span class='line'>        <span class="nv">$nginx</span> -s reload
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot; done&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    restart<span class="o">)</span>
</span><span class='line'>        <span class="nv">$0</span> stop
</span><span class='line'>        <span class="nv">$0</span> start
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    show<span class="o">)</span>
</span><span class='line'>        ps -aux|grep nginx
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    *<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Usage: $0 {start|restart|reload|stop|test|show}&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.2为 nginx.sh 脚本设置可执行属性</h4>

<figure class='code'><figcaption><span>executable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /etc/init.d/nginx
</span></code></pre></td></tr></table></div></figure>


<h4>1.3添加 Nginx 为系统服务（开机自动启动）</h4>

<figure class='code'><figcaption><span>add to sysconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chkconfig --add nginx
</span><span class='line'>chkconfig nginx on
</span></code></pre></td></tr></table></div></figure>


<h4>1.4启动 Nginx</h4>

<figure class='code'><figcaption><span>start service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service nginx start
</span></code></pre></td></tr></table></div></figure>


<h4>1.5在不停止 Nginx 服务的情况下平滑变更 Nginx 配置</h4>

<p>修改 /usr/local/webserver/nginx/conf/nginx.conf 配置文件后，请执行以下命令检查配置文件是否正确：</p>

<figure class='code'><figcaption><span>test config and reload</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service nginx <span class="nb">test</span>
</span><span class='line'>service nginx reload
</span></code></pre></td></tr></table></div></figure>


<h3>2.配置uWsgi服务开机自动启动</h3>

<h4>2.1创建 uWsgi 开机启动脚本</h4>

<figure class='code'><figcaption><span>add auto run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi /etc/init.d/uwsgi
</span></code></pre></td></tr></table></div></figure>


<p>将以下内容写到该脚本中</p>

<figure class='code'><figcaption><span>auto start scripts </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">uwsgi</span><span class="o">=</span>/usr/bin/uwsgi
</span><span class='line'><span class="nv">api_conf</span><span class="o">=</span>/etc/uwsgi/apps-enabled/project-api.ini
</span><span class='line'><span class="nv">web_conf</span><span class="o">=</span>/etc/uwsgi/apps-enabled/project-web.ini
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nv">$1</span> in
</span><span class='line'>    start<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Starting uWsgi&quot;</span>
</span><span class='line'>        nohup <span class="nv">$uwsgi</span> -i <span class="nv">$api_conf</span> &gt;/var/log/uwsgi/project-api.log 2&gt;&amp;1 &amp;
</span><span class='line'>        nohup <span class="nv">$uwsgi</span> -i <span class="nv">$web_conf</span> &gt;/var/log/uwsgi/project-web.log 2&gt;&amp;1 &amp;
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot; done&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    stop<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Stopping uWsgi&quot;</span>
</span><span class='line'>        killall -9 uwsgi
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot; done&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    restart<span class="o">)</span>
</span><span class='line'>        <span class="nv">$0</span> stop
</span><span class='line'>        <span class="nv">$0</span> start
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    show<span class="o">)</span>
</span><span class='line'>        ps -ef|grep uwsgi
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'>    *<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> -n <span class="s2">&quot;Usage: $0 {start|restart|stop|show}&quot;</span>
</span><span class='line'>    ;;
</span><span class='line'>
</span><span class='line'><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.2为 uwsgi 脚本设置可执行属性</h4>

<figure class='code'><figcaption><span>executable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x /etc/init.d/uwsgi
</span></code></pre></td></tr></table></div></figure>


<h4>2.3添加 uWsgi 为系统服务（开机自动启动）</h4>

<figure class='code'><figcaption><span>add to sysconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chkconfig --add uwsgi
</span><span class='line'>chkconfig uwsgi on
</span></code></pre></td></tr></table></div></figure>


<h4>2.4启动 uWsgi</h4>

<figure class='code'><figcaption><span>start service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>service uwsgi start
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux配置Nginx+uWsgi环境]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi/"/>
    <updated>2013-01-15T12:49:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi</id>
    <content type="html"><![CDATA[<p>转Python后碰到的最大的问题就是服务器配置，产品环境最终还是需要用到Nginx+uWsgi，折腾过好久，把操作记录放在这里，方便查询</p>

<p>我的环境：RHEL6，python2.6.6，Nginx1.2.6，uWsgi1.4.4（都是从官方网站下载的最新版本）</p>

<h3>1.环境准备</h3>

<p>先更新系统，并安装编译环境等等。</p>

<figure class='code'><figcaption><span>Prepare environment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum update
</span><span class='line'>yum install glib2-devel openssl-devel pcre-devel bzip2-devel gzip-devel<span class="se">\</span>
</span><span class='line'>    python python-devel libxml2 libxml2-devel python-setuptools zlib-devel<span class="se">\</span>
</span><span class='line'>    wget pcre pcre-devel sudo gcc make autoconf automake
</span></code></pre></td></tr></table></div></figure>


<h3>2.编译安装Nginx</h3>

<p>先到<a href="http://nginx.org/en/download.html">Nginx官网</a>下载最新稳定版本的Nginx1.2.6，编译安装</p>

<!--more-->


<figure class='code'><figcaption><span>Compile and install nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/local/src
</span><span class='line'>wget http://nginx.org/download/nginx-1.2.6.tar.gz
</span><span class='line'>tar -zxvf nginx-1.2.6.tar.gz
</span><span class='line'><span class="nb">cd </span>nginx-1.2.6
</span><span class='line'>./configure <span class="se">\</span>
</span><span class='line'>    --user<span class="o">=</span>nginx <span class="se">\</span>
</span><span class='line'>    --group<span class="o">=</span>nginx <span class="se">\</span>
</span><span class='line'>    --prefix<span class="o">=</span>/usr/share <span class="se">\</span>
</span><span class='line'>    --sbin-path<span class="o">=</span>/usr/sbin/nginx <span class="se">\</span>
</span><span class='line'>    --conf-path<span class="o">=</span>/etc/nginx/nginx.conf <span class="se">\</span>
</span><span class='line'>    --error-log-path<span class="o">=</span>/var/log/nginx/error.log <span class="se">\</span>
</span><span class='line'>    --http-log-path<span class="o">=</span>/var/log/nginx/access.log <span class="se">\</span>
</span><span class='line'>    --pid-path<span class="o">=</span>/var/log/run/nginx.pid <span class="se">\</span>
</span><span class='line'>    --lock-path<span class="o">=</span>/var/log/lock/subsys/nginx <span class="se">\</span>
</span><span class='line'>    --with-http_ssl_module <span class="se">\</span>
</span><span class='line'>    --with-http_realip_module <span class="se">\</span>
</span><span class='line'>    --with-http_addition_module <span class="se">\</span>
</span><span class='line'>    --with-http_sub_module <span class="se">\</span>
</span><span class='line'>    --with-http_dav_module <span class="se">\</span>
</span><span class='line'>    --with-http_flv_module <span class="se">\</span>
</span><span class='line'>    --with-http_gzip_static_module <span class="se">\</span>
</span><span class='line'>    --with-http_stub_status_module <span class="se">\</span>
</span><span class='line'>    --with-mail <span class="se">\</span>
</span><span class='line'>    --with-mail_ssl_module
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>更多的编译选项参考：<a href="http://wiki.nginx.org/NginxInstallOptions">http://wiki.nginx.org/NginxInstallOptions</a></p>

<h3>3.Nginx环境配置</h3>

<h4>3.1为Nginx建立用户</h4>

<figure class='code'><figcaption><span>add user nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>useradd -c <span class="s2">&quot;Nginx user&quot;</span> -s /bin/false -r -d /var/lib/nginx nginx
</span><span class='line'>adduser --system --no-create-home  nginx
</span></code></pre></td></tr></table></div></figure>


<h4>3.2运行Nginx</h4>

<figure class='code'><figcaption><span>run nginx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/usr/sbin/nginx
</span></code></pre></td></tr></table></div></figure>


<h4>3.3配置文件</h4>

<figure class='code'><figcaption><span>nginx conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/nginx/nginx.conf
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;NGINX_CONF_FILE=/etc/nginx/nginx.conf&quot;</span> &gt; /etc/sysconfig/nginx
</span></code></pre></td></tr></table></div></figure>


<h3>4.编译安装uWsgi</h3>

<p>进入uWsgi的<a href="http://projects.unbit.it/uwsgi/">官方网站</a>，下载它的当前稳定版本，我这里下载的是1.4.4版本。</p>

<figure class='code'><figcaption><span>Compiler and install uWsgi</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/local/src
</span><span class='line'>wget http://projects.unbit.it/downloads/uwsgi-1.4.4.tar.gz
</span><span class='line'>tar -zxvf uwsgi-1.4.4.tar.gz
</span><span class='line'>mv uwsgi-1.4.4 uwsgi
</span><span class='line'><span class="nb">cd </span>uwsgi
</span><span class='line'>python setup.py build
</span><span class='line'>make
</span><span class='line'>mv uwsgi /usr/bin  <span class="c">#move execuable file to /usr/bin</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.配置uWsgi</h3>

<p>详细配置方式可以参考官网上的配置说明：<a href="http://projects.unbit.it/uwsgi/wiki/Quickstart">http://projects.unbit.it/uwsgi/wiki/Quickstart</a>
我以项目中的两个模块配置文件示例如下（web模块和api模块，分别走两个不同的端口）</p>

<figure class='code'><figcaption><span>web.ini config for uwsgi</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>uwsgi<span class="o">]</span>
</span><span class='line'><span class="nv">autoload</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">master</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>sager
</span><span class='line'><span class="nv">gid</span><span class="o">=</span>sager
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 2
</span><span class='line'><span class="nv">socket</span> <span class="o">=</span> 127.0.0.1:8081
</span><span class='line'><span class="nv">module</span> <span class="o">=</span> web-uwsgi
</span><span class='line'><span class="nv">chdir</span> <span class="o">=</span> /home/sager/project
</span><span class='line'><span class="nv">pythonpath</span> <span class="o">=</span> /opt/pyenv
</span><span class='line'><span class="nv">virtualenv</span> <span class="o">=</span> /opt/pyenv
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>api.ini config for uwsgi</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>uwsgi<span class="o">]</span>
</span><span class='line'><span class="nv">autoload</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>sager
</span><span class='line'><span class="nv">gid</span><span class="o">=</span>sager
</span><span class='line'><span class="nv">master</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span>2
</span><span class='line'><span class="nv">socket</span> <span class="o">=</span> 127.0.0.1:8080
</span><span class='line'><span class="nv">module</span> <span class="o">=</span> api-uwsgi
</span><span class='line'><span class="nv">chdir</span> <span class="o">=</span> /home/sager/project
</span><span class='line'><span class="nv">pythonpath</span> <span class="o">=</span> /opt/pyenv
</span><span class='line'><span class="nv">virtualenv</span> <span class="o">=</span> /opt/pyenv
</span></code></pre></td></tr></table></div></figure>


<h3>6.启动Nginx和uWsgi服务</h3>

<figure class='code'><figcaption><span>start service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nginx
</span><span class='line'>uwsgi -i api.ini
</span><span class='line'>uwsgi -i web.ini
</span></code></pre></td></tr></table></div></figure>


<h3>7.配置Nginx支持uWsgi</h3>

<p>简化的nginx.conf文件，增加一条include内容，见最后一行</p>

<figure class='code'><figcaption><span>nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user  nginx;
</span><span class='line'>worker_processes  1;
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>    worker_connections  1024;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>    include       mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    sendfile        on;
</span><span class='line'>    keepalive_timeout  65;
</span><span class='line'>    include /etc/nginx/sites-enabled/*;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在/etc/nginx/sites-enabled目录中增加单个的server配置内容，参考如下</p>

<figure class='code'><figcaption><span>sager-project.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name localhost;
</span><span class='line'>    location /api/ <span class="o">{</span>
</span><span class='line'>        rewrite ^/api/<span class="o">(</span>.*<span class="o">)</span><span class="nv">$ </span>/<span class="nv">$1</span> <span class="nb">break</span>;
</span><span class='line'>        include uwsgi_params;
</span><span class='line'>        uwsgi_pass 127.0.0.1:8080;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        include uwsgi_params;
</span><span class='line'>        uwsgi_pass 127.0.0.1:8081;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启服务后，通过http://localhost即可访问项目主页了，web的请求会直接转发给8081端口，而http://localhost/api的请求则会转发到8080端口</p>

<p>至此，我们的配置完成了，可以参考下一篇文章，将nginx和uwsgi配置为系统服务，并开机自动启动</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最有用的Linux命令列表]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/08/most-useful-linux-shell/"/>
    <updated>2013-01-08T14:45:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/08/most-useful-linux-shell</id>
    <content type="html"><![CDATA[<h3>$ sudo !!</h3>

<p><strong><em>Run the last command as root</em></strong></p>

<p>Useful when you forget to use sudo for a command. &#8220;!!&#8221; grabs the last run command.</p>

<hr />

<h3>$ python -m SimpleHTTPServer</h3>

<p><strong><em>Serve current directory tree at http://localhost:8000/</em></strong></p>

<hr />

<h3>$ :w !sodu tee %</h3>

<p><strong><em>Save a file you edited in vim without the needed permissions</em></strong></p>

<p>I often forget to sudo before editing a file I don&#8217;t have write permissions on. When you come to save that file and get the infamous &#8220;E212: Can&#8217;t open file for writing&#8221;, just issue that vim command in order to save the file without the need to save it to a temp file and then copy it back again.</p>

<!--more-->


<hr />

<h3>$ cd -</h3>

<p><strong><em>change to the previous working directory</em></strong></p>

<hr />

<h3>$ ^foo ^bar</h3>

<p><strong><em>Runs previous command but replacing</em></strong></p>

<p>Really useful for when you have a typo in a previous command. Also, arguments default to empty so if you accidentally run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "no typozs"</span></code></pre></td></tr></table></div></figure>


<p>you can correct it with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^z</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>$ mtr google.com</h3>

<p><strong><em>mtr, better than traceroute and ping combined</em></strong></p>

<p>mtr combines the functionality of the traceroute and ping programs in a single network diagnostic tool.
As mtr starts, it investigates the network connection between the host mtr runs on and HOSTNAME. by sending packets with purposly low TTLs. It continues to send packets with low TTL, noting the response time of the intervening routers. This allows mtr to print the response percentage and response times of the internet route to HOSTNAME. A sudden increase in packetloss or response time is often an indication of a bad (or simply over?loaded) link.</p>

<hr />

<h3>$ ctrl-x e</h3>

<p><strong><em>Rapidly invoke an editor to write a long, complex, or tricky command</em></strong></p>

<p>Next time you are using your shell, try typing ctrl-x e (that is holding control key press x and then e). The shell will take what you&#8217;ve written on the command line thus far and paste it into the editor specified by $EDITOR. Then you can edit at leisure using all the powerful macros and commands of vi, emacs, nano, or whatever.</p>

<hr />

<h3>$ &lt;space>command</h3>

<p><strong><em>Execute a command without saving it in the history</em></strong></p>

<p>Prepending one or more spaces to your command won&#8217;t be saved in history.
Useful for pr0n or passwords on the commandline.
Tested on BASH.</p>

<hr />

<h3>$ file.txt</h3>

<p><strong><em>Empty a file</em></strong></p>

<p>For when you want to flush all content from a file without removing it (hat-tip to Marc Kilgus).</p>

<hr />

<h3>$ $ssh-copy-id user@host</h3>

<p><strong><em>Copy ssh keys to user@host to enable password-less ssh logins.</em></strong></p>

<hr />

<h3>$ reset</h3>

<p><strong><em>Salvage a borked terminal</em></strong></p>

<p>If you bork your terminal by sending binary data to STDOUT or similar, you can get your terminal back using this command rather than killing and restarting the session. Note that you often won&#8217;t be able to see the characters as you type them.</p>

<hr />

<h3>$ ffmpeg -f X11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg</h3>

<p><strong><em>Capture video of a linux desktop</em></strong></p>

<hr />

<h3>$ &#8216;ALT+.&#8217; or &#8216;&lt;ESC> .&#8217;</h3>

<p><strong><em>Place the argument of the most recent command on the shell</em></strong></p>

<p>When typing out long arguments, such as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp file.txt /var/www/wp-content/uploads/2009/03/</span></code></pre></td></tr></table></div></figure>


<p>You can put that argument on your command line by holding down the ALT key and pressing the period &#8216;.&#8217; or by pressing <ESC> then the period &#8216;.&#8217;. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd 'ALT+.'</span></code></pre></td></tr></table></div></figure>


<p>would put &#8216;/var/www/wp-content/uploads/2009/03/ as my argument. Keeping pressing &#8216;ALT+.&#8217; to cycle through arguments of your commands starting from most recent to oldest. This can save a ton of typing.</p>

<hr />

<h3>$ mount | column -t</h3>

<p><strong><em>currently mounted filesystems in nice layout</em></strong></p>

<p>Particularly useful if you&#8217;re mounting different drives, using the following command will allow you to see all the filesystems currently mounted on your computer and their respective specs with the added benefit of nice formatting.</p>

<hr />

<h3>$ ssh -N -L2001:localhost:80 somemachine</h3>

<p><strong><em>start a tunnel from some machine&#8217;s port 80 to your local post 2001</em></strong></p>

<p>now you can acces the website by going to http://localhost:2001/</p>

<hr />

<h3>$ echo &#8220;ls -l&#8221; | at midnight</h3>

<p><strong><em>Execute a command at a given time</em></strong></p>

<p>This is an alternative to cron which allows a one-off task to be scheduled for a certain time.</p>

<hr />

<h3>$ dig +short text <keyword>.wp.dg.cx</h3>

<p><strong><em>Query Wikipedia via console over DNS</em></strong></p>

<p>Query Wikipedia by issuing a DNS query for a TXT record. The TXT record will also include a short URL to the complete corresponding Wikipedia entry.You can also write a little shell script like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat wikisole.sh
</span><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>dig +short txt <span class="k">${</span><span class="nv">1</span><span class="k">}</span>.wp.dg.cx
</span></code></pre></td></tr></table></div></figure>


<p>and run it like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./wikisole.sh unix
</span></code></pre></td></tr></table></div></figure>


<p>were your first option ($1) will be used as search term.</p>

<hr />

<h3>$ netstat -tlnp</h3>

<p><strong><em>Lists all listening ports together with the PID of the associated process</em></strong></p>

<p>The PID will only be printed if you&#8217;re holding a root equivalent ID.</p>

<hr />

<h3>$ dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp</h3>

<p><strong><em>output your microphone to a remote computer&#8217;s speaker</em></strong></p>

<p>This will output the sound from your microphone port to the ssh target computer&#8217;s speaker port. The sound quality is very bad, so you will hear a lot of hissing.</p>

<hr />

<h3>$ curl -u user:pass -d status=&#8221;Tweeting from the shell&#8221; http://twitter.com/statuses/update.xml</h3>

<p><strong><em>Update twitter via curl</em></strong></p>

<hr />

<h3>$ !!:gs/foo/bar</h3>

<p><strong><em>Runs previous command replacing foo by bar every time that foo appears</em></strong></p>

<p>Very useful for rerunning a long command changing some arguments globally.
As opposed to ^foo ^bar, which only replaces the first occurrence of foo, this one changes every occurrence.</p>

<hr />

<h3>$ mount -t tmpfs tmps /mnt -o size=1024m</h3>

<p><strong><em>Mount a temporary ram partition</em></strong></p>

<p>Makes a partition in ram which is useful if you need a temporary working space as read/write access is fast.</p>

<p>Be aware that anything saved in this partition will be gone after your computer is turned off.</p>

<hr />

<h3>$ man ascii</h3>

<p><strong><em>Quick access to the ascii table.</em></strong></p>

<hr />

<h3>$ sshfs name@server:/path/to/folder /path/to/mound/point</h3>

<p><strong><em>Mount folder/filesystem through SSH</em></strong></p>

<p>Install SSHFS from http://fuse.sourceforge.net/sshfs.html</p>

<p>Will allow you to mount a folder security over a network.</p>

<hr />

<h3>$ curl ifconfig.me</h3>

<p><strong><em>Get your external IP address</em></strong></p>

<p>curl ifconfig.me/ip -> IP Adress</p>

<p>curl ifconfig.me/host -> Remote Host</p>

<p>curl ifconfig.me/ua ->User Agent</p>

<p>curl ifconfig.me/port -> Port</p>

<p>curl ifconfig.me/all -> All</p>

<p>thanks to <a href="http://ifconfig.me/">ifconfig.me</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git分支的使用]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/08/git-branch/"/>
    <updated>2013-01-08T10:32:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/08/git-branch</id>
    <content type="html"><![CDATA[<h3>git checkout -b sager-profile</h3>

<p>创建本地分支</p>

<h3>git checkout sager-profile</h3>

<p>切换分支到sager-profile</p>

<!--more-->


<h3>git checkout master</h3>

<p>切换分支回master</p>

<h3>git push origin sager-profile:sager-profile</h3>

<p>推送本地分支sager-profile到远程</p>

<h3>git branch</h3>

<p>查看本地分支</p>

<h3>git branch -r</h3>

<p>查看远程分支</p>

<h3>git branch -d sager-profile</h3>

<p>删除本地分支</p>

<h3>git push origin :sager-profile</h3>

<p>删除远程分支,语法同推送分支到远程， 只是将一个空分支推送到远程指定分支，也就是删掉远程分支</p>

<h3>git branch -r -d origin/sager-profile</h3>

<p>如果上面的语句执行失败，可以使用这个删除远程分支</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用git stash暂存修改]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/27/git-stash/"/>
    <updated>2012-12-27T10:40:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/27/git-stash</id>
    <content type="html"><![CDATA[<p>当你需要在不同的branch之间切换的时候，可以把当前工作区的修改内容加入到暂存堆栈，也可以随时取出</p>

<h3>git stash</h3>

<p>将当前的修改保存在暂存堆栈</p>

<h3>git stash pop</h3>

<p>将最新暂存堆栈的内容恢复到工作区</p>

<!-- more -->


<h3>git stash pop {num}</h3>

<p>将指定序号的暂存堆栈的内容恢复到工作区</p>

<h3>git stash list</h3>

<p>查看当前暂存堆栈中有哪些内容</p>

<h3>git stash clear</h3>

<p>清空暂存堆栈的内容</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu安装Dropbox后无法连接服务器的解决方法]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/26/ubuntu-dropbox/"/>
    <updated>2012-12-26T07:50:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/26/ubuntu-dropbox</id>
    <content type="html"><![CDATA[<p>由于工作需要，操作系统从Mac换到了Ubuntu，现在这个年代，谁没个云存储啥的，Dropbox当然是首选（通过某些方式已经将免费空间提升到25G了），装完Ubuntu后第一个事情就是装Dropbox。</p>

<p>于是我就马不停蹄地下载了Dropbox的安装包然后装到Ubuntu上，装完一打开，弹出这么个提示：“Trouble connecting to Dropbox server.Maybe your internet connection is down,or you need to set your http_proxy environment variable”，主要意思就说无法连接上dropbox的服务器。</p>

<p>然后我把hosts改了，问题依旧…，只有祭出google大神了</p>

<!--more-->


<p>原来装了那个deb包还不算装完，第一次启动时还要下载一个.tar.gz的包，明显这个包的地址在墙外了。</p>

<p>所以需要到这个地址 <a href="http://www.getdropbox.com/download?plat=lnx.x86">http://www.getdropbox.com/download?plat=lnx.x86</a> 下载这个.tar.gz包，当然要先爬墙。（我把这个文件传到了华为网盘 <a href="http://dl.vmall.com/c0sgq6m4m6">http://dl.vmall.com/c0sgq6m4m6</a> ，无法爬墙的同学如果信得过我的话可以下载）</p>

<p>然后在下载到的dropbox-lnx.x86-1.2.52.tar.gz文件解压到主文件夹，是个隐藏文件夹.dropbox-dist, 按“Ctrl + h”显示隐藏文件</p>

<p>最后打开dropbox即可正常使用啦～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox中复制使用虚拟硬盘]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/24/copy-virtualbox-hd/"/>
    <updated>2012-12-24T22:56:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/24/copy-virtualbox-hd</id>
    <content type="html"><![CDATA[<p>VirtualBox可不像VMware那样，直接复制虚拟磁盘文件就可以了事的，只因为VirtualBox识别虚拟磁盘文件VDI采用了uuid识别技术。</p>

<p>由于测试需要搭建局域网环境，需要两台虚拟机同时运行。当我安装完一个虚拟系统时，我将虚拟磁盘文件复制一份重新创建虚拟系统时提示打开虚拟硬盘 windowsxp.vdi 失败。</p>

<pre><code>Cannot register the hard disk 'windowsxp.vdi' with UUID {24eb969f-8c98-470d-b2dd-35318f2b8860} 
because a hard disk 'windowsxp.vdi' with UUID {24eb969f-8c98-470d-b2dd-35318f2b8860} already exists 
in the media registry ('/home/sager/VirtualBox VMs/windowsxp/windowsxp.vid').
</code></pre>

<p>往Google里找寻了一番，原来Virtualbox也是有VBoxManage命令的,于是我决定给复制的vdi文件重新分配uuid。</p>

<!-- more -->


<figure class='code'><figcaption><span>重新分配uuid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sager@sager-desktop:~/VirtualBox VMs/WinXP&gt;VBoxManage internalcommands sethduuid windowsxp.vdi
</span><span class='line'>UUID changed to: c8acda7d-149d-4157-affb-2d2dbc1bab7
</span></code></pre></td></tr></table></div></figure>


<p>接着就可以使用拷贝的vdi文件正常的创建第二台虚拟机了。</p>

<p>当然如果你没有直接复制vdi文件,那么直接用Virtualbox自带的克隆vdi文件命令。</p>

<figure class='code'><figcaption><span>自带克隆vdi文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sager@sager-desktop:~/VirtualBox VMs/WinXP&gt;VBoxManage clonehd windowsxp.vdi winxp.clone.vdi
</span></code></pre></td></tr></table></div></figure>


<p>Virualbox的快照功能非常不错,可以即时恢复到快照时的状态，做试验就不用重新配环境了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用多个ssh key登录github不同账号]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/24/multi-github-account/"/>
    <updated>2012-12-24T14:09:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/24/multi-github-account</id>
    <content type="html"><![CDATA[<p>使用ssh key的时候可以通过config文件指定不同域名使用不同的key文件，因此通过在hosts中设置不同的本地域名来使用多个ssh key文件登陆不同的github账号。</p>

<p>例如我们有账号a和账号b，对应的ssh key文件分别是id_rsa_a和id_rsa_b，首先修改/etc/hosts文件，设置两个本地域名指向github.com</p>

<figure class='code'><figcaption><span>/etc/hosts  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>a.github.com    github.com  <span class="c">#a.github.com可以是任意文字</span>
</span><span class='line'>b.github.com    github.com
</span></code></pre></td></tr></table></div></figure>


<p>修改用户的ssh配置文件~/.ssh/config，示例如下：</p>

<!-- more -->




<figure class='code'><figcaption><span>~/.ssh/config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Host a.github.com
</span><span class='line'>    User git
</span><span class='line'>    Hostname github.com
</span><span class='line'>    PreferredAuthentications publickey
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa_a
</span><span class='line'>Host b.github.com
</span><span class='line'>    User git
</span><span class='line'>    Hostname github.com
</span><span class='line'>    PreferredAuthentications publickey
</span><span class='line'>    IdentityFile ~/.ssh/id_rsa_b
</span></code></pre></td></tr></table></div></figure>


<p>然后在你的git仓库的远程地址中，将对应的a.github.com和b.github.com替换原来的github.com，参考下面的变化：</p>

<figure class='code'><figcaption><span>git clone </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git@a.githuc.com:sagerblog/sagerblog.github.com
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最小化安装Fedora]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/24/min-fedora/"/>
    <updated>2012-12-24T09:17:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/24/min-fedora</id>
    <content type="html"><![CDATA[<p>1.光盘引导</p>

<p>进入到Fedora 16的安装引导界面，按TAB键，在后面追加数字3，Enter，</p>

<p>然后系统引导，弹出一个登录，使用root直接登录即可。</p>

<p>2.运行如下命令</p>

<p>/usr/sbin/anaconda &#8211;liveinst &#8211;method=livecd:///dev/mapper/live-osimg-min</p>

<p>然后提示完成安装即可。</p>

<p>3.最后需要修改一个默认启动到文本界面</p>

<!-- more -->


<p>cd /etc/systemd/system</p>

<p>ln -s /lib/systemd/system/multi-user.target default.target</p>

<p>4.参考</p>

<p>http://www.linuxreaders.com/2010/09/08/install-fedora-from-live-cd-cli/#.T1YF74da6G4</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[经典实用的Shell命令]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/24/useful-shell/"/>
    <updated>2012-12-24T09:02:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/24/useful-shell</id>
    <content type="html"><![CDATA[<p><strong>1、ls -AQ|grep -v proc|xargs du -sh|sort -h</strong></p>

<p>按从小到大的顺序显示根目录下除proc目录以外的所有文件及目录大小（须在根目录下执行该命令）</p>

<p><strong>2、dpkg -l |grep ^rc |awk &#8216;{print $2}&#8217; |xargs dpkg &#8211;purge</strong></p>

<p>删除已删除包的残留配置文件（Debian分支）</p>

<p><strong>3、find . -type f -print |xargs du -sb |sort -h</strong></p>

<p>查找当下目录及其子目录下面的所有文件，并按文件大小，由小到大排序</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first Octopress test page]]></title>
    <link href="http://sagerblog.github.com/blog/2012/12/23/first/"/>
    <updated>2012-12-23T22:28:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2012/12/23/first</id>
    <content type="html"><![CDATA[<p><a href='http://sagerxiao.github.com/presentations/'>Sager&#8217;s HTML5 presentations</a></p>

<figure class='code'><figcaption><span>Discover if a number is prime </span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>      <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Discover if a number is prime </span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">make</span> <span class="n">me</span> <span class="n">a</span> <span class="n">sandwich</span>
</span></code></pre></td></tr></table></div></figure>


<div><script src='https://gist.github.com/1059334.js?file=svg_bullets.rb'></script>
<noscript><pre><code>require 'sass'

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, ' '), 'image/svg+xml')
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>




<figure class='code'><figcaption><span>Login to 163 email </span><a href='http://mail.163.com'>163邮件系统</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Login163</span><span class="p">:</span>
</span><span class='line'>   <span class="c">#伪装browser</span>
</span><span class='line'>    <span class="n">header</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;User-Agent&#39;</span><span class="p">:</span><span class="s">&#39;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6)</span><span class="se">\</span>
</span><span class='line'><span class="s">        Gecko/20091201 Firefox/3.5.6&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">username</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">passwd</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">cookie</span> <span class="o">=</span> <span class="bp">None</span> <span class="c">#cookie对象</span>
</span><span class='line'>    <span class="n">cookiefile</span> <span class="o">=</span> <span class="s">&#39;./cookies.dat&#39;</span> <span class="c">#cookie临时存放地</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">username</span><span class="p">,</span><span class="n">passwd</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">passwd</span> <span class="o">=</span> <span class="n">passwd</span>
</span><span class='line'>        <span class="c">#cookie设置</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cookie</span> <span class="o">=</span> <span class="n">cookielib</span><span class="o">.</span><span class="n">LWPCookieJar</span><span class="p">()</span> <span class="c">#自定义cookie存放</span>
</span><span class='line'>        <span class="n">opener</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPCookieProcessor</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cookie</span><span class="p">))</span>
</span><span class='line'>        <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We made 1 million dollars  this year</p>

<p>rake new_post[&#8220;My New Post&#8221;]</p>

<p>edit my-new-post.markdown with text editor</p>

<p>jekyll markup</p>

<figure class='code'><figcaption><span>Preview&Deploy  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake preview
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Commit source  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git ci -am <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://placekitten.com/890/280">
Bacon ipsum dolor sit amet exercitation ball tip consectetur tempor. Biltong exercitation aliqua, ribeye consequat veniam consectetur.</p>

<p><img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
Aliquip nulla do tempor, ball tip dolore anim esse strip steak nisi nostrud. Tri-tip mollit deserunt ut duis, commodo brisket short loin est hamburger sunt consequat rump meatloaf. Exercitation enim aliqua tempor dolore. Non eu venison, officia boudin tri-tip enim beef ribs flank cupidatat in aute. Tail voluptate fugiat aute flank, venison sint.</p>

<p><img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
Brisket quis velit bresaola. Pork loin pork chop beef duis. Short loin fugiat officia short ribs magna. Ullamco eu proident jerky, fugiat chuck nostrud ham rump meatloaf eiusmod adipisicing. Qui et reprehenderit, magna biltong consequat short ribs pancetta. Tail tenderloin sausage, hamburger corned beef drumstick ad. Eu labore enim velit.</p>

<p><img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">
Filler text courtesy of Bacon Ipsum, Images courtesy of Place Kitten.</p>

<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>


<p>那么一个极客眼中的博客应该具备哪些要素？</p>

<p><strong>1. 基于文本的编辑</strong></p>

<p>作为极客，你必须很在意 Vim, Emacs 之流，你应该鄙视一切在 Office，Web 里的文字工作，Office 之流很方便使用，但是实在没有什么效率。即便在我们这个行业里，很多人至今没有弄清楚方便不等于高效这个道理。所以我个人只认同使用 Vim 方式处理任何文本工作，包括代码和博客。</p>

<p><strong>2. 方便的书写和阅读格式</strong></p>

<p>假设你承认上述第一点的理念，那么我们还是在写博客，仍然需要格式化的文字使得文字本身在网络上更富表现力，方便读者阅读。但是 html 是一种很冗余的格式存在，既不方便书写也不方便对编辑的源码直接阅读。同时纯文本的格式又走上了另一个极端，书写和阅读基本没有任何代价，坏处在于纯文本几乎又没有任何表现力，除了可以分出段落，它不能粗体，不能斜体，不能更改字号，不能列表。所以结论是：我们需要一种介于 html 和纯文本之间的格式来书写博客，它有不那么大的书写和阅读的成本，又兼顾一定的文字表现力。答案就是 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>，再送一份红利就是在线的 <a href="http://www.ctrlshift.net/project/markdowneditor/">Markdown Editor</a>。</p>

<p><strong>3. 灵活的备份和恢复</strong></p>

<p>这是一条足以放弃 WordPress 的重要理由。我们无非是在码字而已，没有理由引入数据库，基于文本的保存是最安全的保存，它便于检索(grep)，容易导入，导出，不依赖于任何第三方软件或者操作系统。几百年后，这篇文档仍然可以被那时的计算机打开，这很重要，好比我们今天仍然有机会看到前人的青铜器，但是我们的后人只能从图片上看看今天的各类一次性制品。如果要求更高一些，我们还希望有类似管理代码的方式来管理我们的博客，同样是文本，Version Control System 不应该是代码的专有权利。中央服务器也可以保证在任何地方，任何时候检出，更新，提交你的博客，并且也不妨碍除你以外的人这么做。</p>

<p><strong>4. 基于命令行的操作方式</strong></p>

<p>极客的重要特征是远离 Windows，所以我们甚至应该幻想一个 Windows 不友好的方式来写博客。它应该尽量基于命令行，在 Linux 系统上运行良好，羞啥那些 Windows 上的普通青年和 Mac 上的文艺青年，这不是说我很大度的表示我就是2B青年，只是我实在不愿意诸君承担2B青年的包袱，只好自己大度的承担罢了。</p>

<p><strong>5. 支持代码片段的显示</strong></p>

<p>偶尔想秀个小代码也是装2的内在诉求和外在表现之一，所以我们的博客应该是可以这样子的：</p>

<figure class='code'><figcaption><span>Code Snips to test code blocks </span><a href='http://www.google.com'>link test</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TestCode</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">testCode</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;hello world!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>6. 最后的最后，不缩水的博客</strong></p>

<p>好处不能都被你这个2B青年占完了不是吗？你要这个要那个，都满足你了，末了扔给你一个缩水的博客，你不由自主的和那些个不入你法眼的新浪博客，不讨巧的 WordPress 做比较了，于是你又开始不满意了。好吧，我们折中一下，RSS 导出不能少，分享到 Facebook，Twitter，甚至于新浪微博也不能落下，还要能访客留言，搜索过往，提示最近的博客，标注 tag。于是是除了你那些个蛋疼的特殊癖好，别人有的也全都要满足。。。</p>

<h1>Mou</h1>

<pre><code>1. 真的没什么
2. 其实有意思的
</code></pre>

<p><strong><a href="http://mouapp.com/">Mou</a></strong>， the missing <code>Markdown</code> editor for <em><code>web developers</code></em>.</p>

<figure class='code'><figcaption><span>Python&#8217;s print function </span><a href='http://sagerblog.github.com'>Test code</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Hello octopress&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Login to 163 email </span><a href='http://mail.163.com'>163邮件系统</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Hello octopress&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Backup system configuration files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span><span class='line'>tar cvfz /home/sager/bakup/etc.tar.gz /etc/ *
</span></code></pre></td></tr></table></div></figure>


<pre><code>echo $SHELL
tar cvfz /home/sager/bakup/etc.tar.gz /etc/ *
</code></pre>
]]></content>
  </entry>
  
</feed>
