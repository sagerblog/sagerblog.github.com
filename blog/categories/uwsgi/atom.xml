<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: uwsgi | SagerXiao's Blog]]></title>
  <link href="http://sagerblog.github.com/blog/categories/uwsgi/atom.xml" rel="self"/>
  <link href="http://sagerblog.github.com/"/>
  <updated>2013-01-23T10:38:27+08:00</updated>
  <id>http://sagerblog.github.com/</id>
  <author>
    <name><![CDATA[Sager Xiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[配置Nginx和uWsig服务开机自动启动]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/15/linux-service-auto-startup/"/>
    <updated>2013-01-15T14:53:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/15/linux-service-auto-startup</id>
    <content type="html"><![CDATA[<h3>1.配置Nginx服务开机自动启动</h3>

<h4>1.1创建 Nginx 开机启动脚本</h4>

<p><code>bash add auto run
vi /etc/init.d/nginx
</code>
将以下内容写到该脚本中</p>

<!--more-->


<p>```bash auto start scripts</p>

<h1>!/bin/bash</h1>

<p>nginx=/usr/sbin/nginx
conf=/etc/nginx/nginx.conf</p>

<p>case $1 in</p>

<pre><code>start)
    echo -n "Starting Nginx"
    $nginx -c $conf
    echo " done"
;;

stop)
    echo -n "Stopping Nginx"
    $nginx -s stop
    echo " done"
;;

test)
    $nginx -t -c $conf
;;

reload)
    echo -n "Reloading Nginx"
    $nginx -s reload
    echo " done"
;;

restart)
    $0 stop
    $0 start
;;

show)
    ps -aux|grep nginx
;;

*)
    echo -n "Usage: $0 {start|restart|reload|stop|test|show}"
;;
</code></pre>

<p>esac
```</p>

<h4>1.2为 nginx.sh 脚本设置可执行属性</h4>

<p><code>bash executable
chmod +x /etc/init.d/nginx
</code></p>

<h4>1.3添加 Nginx 为系统服务（开机自动启动）</h4>

<p><code>bash add to sysconfig
chkconfig --add nginx
chkconfig nginx on
</code></p>

<h4>1.4启动 Nginx</h4>

<p><code>bash start service
service nginx start
</code></p>

<h4>1.5在不停止 Nginx 服务的情况下平滑变更 Nginx 配置</h4>

<p>修改 /usr/local/webserver/nginx/conf/nginx.conf 配置文件后，请执行以下命令检查配置文件是否正确：
<code>bash test config and reload
service nginx test
service nginx reload
</code></p>

<h3>2.配置uWsgi服务开机自动启动</h3>

<h4>2.1创建 uWsgi 开机启动脚本</h4>

<p><code>bash add auto run
vi /etc/init.d/uwsgi
</code>
将以下内容写到该脚本中
```bash auto start scripts</p>

<h1>!/bin/bash</h1>

<p>uwsgi=/usr/bin/uwsgi
api_conf=/etc/uwsgi/apps-enabled/project-api.ini
web_conf=/etc/uwsgi/apps-enabled/project-web.ini</p>

<p>case $1 in</p>

<pre><code>start)
    echo -n "Starting uWsgi"
    nohup $uwsgi -i $api_conf &gt;/var/log/uwsgi/project-api.log 2&gt;&amp;1 &amp;
    nohup $uwsgi -i $web_conf &gt;/var/log/uwsgi/project-web.log 2&gt;&amp;1 &amp;
    echo " done"
;;

stop)
    echo -n "Stopping uWsgi"
    killall -9 uwsgi
    echo " done"
;;

restart)
    $0 stop
    $0 start
;;

show)
    ps -ef|grep uwsgi
;;

*)
    echo -n "Usage: $0 {start|restart|stop|show}"
;;
</code></pre>

<p>esac
```</p>

<h4>2.2为 uwsgi 脚本设置可执行属性</h4>

<p><code>bash executable
chmod +x /etc/init.d/uwsgi
</code></p>

<h4>2.3添加 uWsgi 为系统服务（开机自动启动）</h4>

<p><code>bash add to sysconfig
chkconfig --add uwsgi
chkconfig uwsgi on
</code></p>

<h4>2.4启动 uWsgi</h4>

<p><code>bash start service
service uwsgi start
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux配置Nginx+uWsgi环境]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi/"/>
    <updated>2013-01-15T12:49:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi</id>
    <content type="html"><![CDATA[<p>转Python后碰到的最大的问题就是服务器配置，产品环境最终还是需要用到Nginx+uWsgi，折腾过好久，把操作记录放在这里，方便查询</p>

<p>我的环境：RHEL6，python2.6.6，Nginx1.2.6，uWsgi1.4.4（都是从官方网站下载的最新版本）</p>

<h3>1.环境准备</h3>

<p>先更新系统，并安装编译环境等等。
```bash Prepare environment
yum update
yum install glib2-devel openssl-devel pcre-devel bzip2-devel gzip-devel\</p>

<pre><code>python python-devel libxml2 libxml2-devel python-setuptools zlib-devel\
wget pcre pcre-devel sudo gcc make autoconf automake
</code></pre>

<p>```</p>

<h3>2.编译安装Nginx</h3>

<p>先到<a href="http://nginx.org/en/download.html">Nginx官网</a>下载最新稳定版本的Nginx1.2.6，编译安装</p>

<!--more-->


<p><code>bash Compile and install nginx
cd /usr/local/src
wget http://nginx.org/download/nginx-1.2.6.tar.gz
tar -zxvf nginx-1.2.6.tar.gz
cd nginx-1.2.6
./configure \
    --user=nginx \
    --group=nginx \
    --prefix=/usr/share \
    --sbin-path=/usr/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/log/run/nginx.pid \
    --lock-path=/var/log/lock/subsys/nginx \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_gzip_static_module \
    --with-http_stub_status_module \
    --with-mail \
    --with-mail_ssl_module
make
make install
</code>
更多的编译选项参考：<a href="http://wiki.nginx.org/NginxInstallOptions">http://wiki.nginx.org/NginxInstallOptions</a></p>

<h3>3.Nginx环境配置</h3>

<h4>3.1为Nginx建立用户</h4>

<p><code>bash add user nginx
useradd -c "Nginx user" -s /bin/false -r -d /var/lib/nginx nginx
adduser --system --no-create-home  nginx
</code></p>

<h4>3.2运行Nginx</h4>

<p><code>bash run nginx
/usr/sbin/nginx
</code></p>

<h4>3.3配置文件</h4>

<p><code>bash nginx conf
/etc/nginx/nginx.conf
echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" &gt; /etc/sysconfig/nginx
</code></p>

<h3>4.编译安装uWsgi</h3>

<p>进入uWsgi的<a href="http://projects.unbit.it/uwsgi/">官方网站</a>，下载它的当前稳定版本，我这里下载的是1.4.4版本。
<code>bash Compiler and install uWsgi
cd /usr/local/src
wget http://projects.unbit.it/downloads/uwsgi-1.4.4.tar.gz
tar -zxvf uwsgi-1.4.4.tar.gz
mv uwsgi-1.4.4 uwsgi
cd uwsgi
python setup.py build
make
mv uwsgi /usr/bin  #move execuable file to /usr/bin
</code></p>

<h3>5.配置uWsgi</h3>

<p>详细配置方式可以参考官网上的配置说明：<a href="http://projects.unbit.it/uwsgi/wiki/Quickstart">http://projects.unbit.it/uwsgi/wiki/Quickstart</a>
我以项目中的两个模块配置文件示例如下（web模块和api模块，分别走两个不同的端口）
<code>bash web.ini config for uwsgi
[uwsgi]
autoload = true
master = true
uid=sager
gid=sager
workers = 2
socket = 127.0.0.1:8081
module = web-uwsgi
chdir = /home/sager/project
pythonpath = /opt/pyenv
virtualenv = /opt/pyenv
</code>
<code>bash api.ini config for uwsgi
[uwsgi]
autoload = true
uid=sager
gid=sager
master = true
workers =2
socket = 127.0.0.1:8080
module = api-uwsgi
chdir = /home/sager/project
pythonpath = /opt/pyenv
virtualenv = /opt/pyenv
</code></p>

<h3>6.启动Nginx和uWsgi服务</h3>

<p><code>bash start service
nginx
uwsgi -i api.ini
uwsgi -i web.ini
</code></p>

<h3>7.配置Nginx支持uWsgi</h3>

<p>简化的nginx.conf文件，增加一条include内容，见最后一行
```bash nginx.conf
user  nginx;
worker_processes  1;
events {</p>

<pre><code>worker_connections  1024;
</code></pre>

<p>}
http {</p>

<pre><code>include       mime.types; 
default_type  application/octet-stream; 
sendfile        on; 
keepalive_timeout  65; 
include /etc/nginx/sites-enabled/*; 
</code></pre>

<p>}
<code>
然后在/etc/nginx/sites-enabled目录中增加单个的server配置内容，参考如下
</code>bash sager-project.conf
server {</p>

<pre><code>listen 80; 
server_name localhost;  
location /api/ { 
    rewrite ^/api/(.*)$ /$1 break; 
    include uwsgi_params; 
    uwsgi_pass 127.0.0.1:8080;  
} 
location / { 
    include uwsgi_params; 
    uwsgi_pass 127.0.0.1:8081;  
} 
</code></pre>

<p>}
```
重启服务后，通过http://localhost即可访问项目主页了，web的请求会直接转发给8081端口，而http://localhost/api的请求则会转发到8080端口</p>

<p>至此，我们的配置完成了，可以参考下一篇文章，将nginx和uwsgi配置为系统服务，并开机自动启动</p>
]]></content>
  </entry>
  
</feed>
