<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | SagerXiao's Blog]]></title>
  <link href="http://sagerblog.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://sagerblog.github.com/"/>
  <updated>2013-01-21T18:51:18+08:00</updated>
  <id>http://sagerblog.github.com/</id>
  <author>
    <name><![CDATA[Sager Xiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python循环遍历所有文件并改名]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/21/python-walk-rename-file/"/>
    <updated>2013-01-21T18:34:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/21/python-walk-rename-file</id>
    <content type="html"><![CDATA[<p>我希望将某个目录下的所有jpeg文件改名为jpg结尾的文件，可以利用os.walk和os.rename两个功能</p>

<p>```python walk all files in special directory</p>

<h1>!/usr/bin/python</h1>

<p>import os</p>

<p>def walkDir(rootdir=None):</p>

<pre><code>print rootdir
count = 0
for parent, dirnames, filenames in os.walk(rootdir):
    #for dirname in dirnames:
    #    print "parent is:" + parent
    #    print "dirname is:" + dirname
    for filename in filenames:
        if filename[-5:] == ".jpeg":
            src_file = os.path.join(parent, filename)
            dest_file = src_file[:-5] + ".jpg"
            os.rename(src_file, dest_file)
            count += 1
print 'Rename total file count is:', count
</code></pre>

<p>def main():</p>

<pre><code>walkDir(os.getcwd())
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>main()
</code></pre>

<p>```</p>

<!--more-->


<p>利用walk还可以做很多其他的事情，例如对所有python源代码进行编译，以便发布打包的时候使用遍以后的二进制文件，而不是源代码。
可以使用如下代码：
<code>python Compile python source code
py_compile.compile(filename)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python计算文件行数的三种方法]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/21/python-file-line-count/"/>
    <updated>2013-01-21T18:26:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/21/python-file-line-count</id>
    <content type="html"><![CDATA[<h2>Python计算文件行数的三种方法</h2>

<p>```python Caculate file lines
import timeit,os
def linecount_1():
    return len(open('data.sql').readlines())    #最直接的方法</p>

<p>def linecount_2():
    count = -1 #让空文件的行号显示0
    for count,line in enumerate(open('data.sql')): pass
    #enumerate格式化成了元组,count就是行号,因为从0开始要+1
    return count+1
 
def linecount_3():
    count = 0
    thefile = open('data.sql','rb')
    while 1:
        buffer = thefile.read(65536)
        if not buffer:break
        count += buffer.count('\n') #通过读取换行符计算
    return count
 
for f in linecount_1,linecount_2,linecount_3:</p>

<pre><code>print f.__name__,f()
 
for f in linecount_1,linecount_2,linecount_3:
    #第一个参数是函数,第二个参数是环境，例如import模块
    t = timeit.Timer(f,'')      
    #第一个参数是重复整个测试的次数，第二个参数是每个测试中调用被计时语句的次数。
    print min(t.repeat(100,3))  
</code></pre>

<p>```</p>

<!--more-->


<h3>结果：</h3>

<p>linecount_1 43119</p>

<p>linecount_2 43119</p>

<p>linecount_3 43119</p>

<p>0.04646344717</p>

<p>0.0403758019525</p>

<p>0.0126613857348</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux配置Nginx+uWsgi环境]]></title>
    <link href="http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi/"/>
    <updated>2013-01-15T12:49:00+08:00</updated>
    <id>http://sagerblog.github.com/blog/2013/01/15/linux-nginx-uwsgi</id>
    <content type="html"><![CDATA[<p>转Python后碰到的最大的问题就是服务器配置，产品环境最终还是需要用到Nginx+uWsgi，折腾过好久，把操作记录放在这里，方便查询</p>

<p>我的环境：RHEL6，python2.6.6，Nginx1.2.6，uWsgi1.4.4（都是从官方网站下载的最新版本）</p>

<h3>1.环境准备</h3>

<p>先更新系统，并安装编译环境等等。
```bash Prepare environment
yum update
yum install glib2-devel openssl-devel pcre-devel bzip2-devel gzip-devel\</p>

<pre><code>python python-devel libxml2 libxml2-devel python-setuptools zlib-devel\
wget pcre pcre-devel sudo gcc make autoconf automake
</code></pre>

<p>```</p>

<h3>2.编译安装Nginx</h3>

<p>先到<a href="http://nginx.org/en/download.html">Nginx官网</a>下载最新稳定版本的Nginx1.2.6，编译安装</p>

<!--more-->


<p><code>bash Compile and install nginx
cd /usr/local/src
wget http://nginx.org/download/nginx-1.2.6.tar.gz
tar -zxvf nginx-1.2.6.tar.gz
cd nginx-1.2.6
./configure \
    --user=nginx \
    --group=nginx \
    --prefix=/usr/share \
    --sbin-path=/usr/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/log/run/nginx.pid \
    --lock-path=/var/log/lock/subsys/nginx \
    --with-http_ssl_module \
    --with-http_realip_module \
    --with-http_addition_module \
    --with-http_sub_module \
    --with-http_dav_module \
    --with-http_flv_module \
    --with-http_gzip_static_module \
    --with-http_stub_status_module \
    --with-mail \
    --with-mail_ssl_module
make
make install
</code>
更多的编译选项参考：<a href="http://wiki.nginx.org/NginxInstallOptions">http://wiki.nginx.org/NginxInstallOptions</a></p>

<h3>3.Nginx环境配置</h3>

<h4>3.1为Nginx建立用户</h4>

<p><code>bash add user nginx
useradd -c "Nginx user" -s /bin/false -r -d /var/lib/nginx nginx
adduser --system --no-create-home  nginx
</code></p>

<h4>3.2运行Nginx</h4>

<p><code>bash run nginx
/usr/sbin/nginx
</code></p>

<h4>3.3配置文件</h4>

<p><code>bash nginx conf
/etc/nginx/nginx.conf
echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" &gt; /etc/sysconfig/nginx
</code></p>

<h3>4.编译安装uWsgi</h3>

<p>进入uWsgi的<a href="http://projects.unbit.it/uwsgi/">官方网站</a>，下载它的当前稳定版本，我这里下载的是1.4.4版本。
<code>bash Compiler and install uWsgi
cd /usr/local/src
wget http://projects.unbit.it/downloads/uwsgi-1.4.4.tar.gz
tar -zxvf uwsgi-1.4.4.tar.gz
mv uwsgi-1.4.4 uwsgi
cd uwsgi
python setup.py build
make
mv uwsgi /usr/bin  #move execuable file to /usr/bin
</code></p>

<h3>5.配置uWsgi</h3>

<p>详细配置方式可以参考官网上的配置说明：<a href="http://projects.unbit.it/uwsgi/wiki/Quickstart">http://projects.unbit.it/uwsgi/wiki/Quickstart</a>
我以项目中的两个模块配置文件示例如下（web模块和api模块，分别走两个不同的端口）
<code>bash web.ini config for uwsgi
[uwsgi]
autoload = true
master = true
uid=sager
gid=sager
workers = 2
socket = 127.0.0.1:8081
module = web-uwsgi
chdir = /home/sager/project
pythonpath = /opt/pyenv
virtualenv = /opt/pyenv
</code>
<code>bash api.ini config for uwsgi
[uwsgi]
autoload = true
uid=sager
gid=sager
master = true
workers =2
socket = 127.0.0.1:8080
module = api-uwsgi
chdir = /home/sager/project
pythonpath = /opt/pyenv
virtualenv = /opt/pyenv
</code></p>

<h3>6.启动Nginx和uWsgi服务</h3>

<p><code>bash start service
nginx
uwsgi -i api.ini
uwsgi -i web.ini
</code></p>

<h3>7.配置Nginx支持uWsgi</h3>

<p>简化的nginx.conf文件，增加一条include内容，见最后一行
```bash nginx.conf
user  nginx;
worker_processes  1;
events {</p>

<pre><code>worker_connections  1024;
</code></pre>

<p>}
http {</p>

<pre><code>include       mime.types; 
default_type  application/octet-stream; 
sendfile        on; 
keepalive_timeout  65; 
include /etc/nginx/sites-enabled/*; 
</code></pre>

<p>}
<code>
然后在/etc/nginx/sites-enabled目录中增加单个的server配置内容，参考如下
</code>bash sager-project.conf
server {</p>

<pre><code>listen 80; 
server_name localhost;  
location /api/ { 
    rewrite ^/api/(.*)$ /$1 break; 
    include uwsgi_params; 
    uwsgi_pass 127.0.0.1:8080;  
} 
location / { 
    include uwsgi_params; 
    uwsgi_pass 127.0.0.1:8081;  
} 
</code></pre>

<p>}
```
重启服务后，通过http://localhost即可访问项目主页了，web的请求会直接转发给8081端口，而http://localhost/api的请求则会转发到8080端口</p>

<p>至此，我们的配置完成了，可以参考下一篇文章，将nginx和uwsgi配置为系统服务，并开机自动启动</p>
]]></content>
  </entry>
  
</feed>
